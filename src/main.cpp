#include "applesauce/App.h"
#include "applesauce/VertexBuffer.h"
#include "applesauce/VertexArray.h"
#include "applesauce/Shader.h"
#include "applesauce/Camera.h"

#include "util/gltf.h"

#include <imgui.h>
#include <imgui_impl_glfw.h>
#include <imgui_impl_opengl3.h>

#define GLM_SWIZZLE
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtx/euler_angles.hpp>
#include <glm/gtx/rotate_vector.hpp>
#include <glm/gtx/string_cast.hpp>
#include <glm/mat4x4.hpp>
#include <glm/vec3.hpp>
#include <glm/vec4.hpp>

#include <algorithm>
#include <cstdlib>
#include <ctime>
#include <filesystem>
#include <fstream>
#include <memory>
#include <ostream>
#include <sstream>
#include <vector>

struct Vertex
{
    glm::vec3 position;
    glm::vec3 normal;
};

static constexpr glm::vec3 FLOOR_COLOR = glm::vec3{1.0, 0.6, 0.1};
static constexpr glm::vec3 WALL_COLOR = glm::vec3{0.6, 0.6, 1.0};

static float MAX_DIST = 25.0f;
static constexpr float MIN_DIST = 8.0f;

static size_t nextTankColor = 0;
static constexpr glm::vec3 TANK_COLORS[] = {
    glm::vec3{0, 0, 1}, // blue
    glm::vec3{1, 0, 0}, // red
    glm::vec3{1, 1, 1}, // white
    glm::vec3{1, 1, 0}, // yellow
    glm::vec3{0, 0, 0}, // black
};

std::string readFileText(const char *filename)
{
    std::ifstream f{filename};
    return std::string(std::istreambuf_iterator<char>(f), std::istreambuf_iterator<char>());
}

std::shared_ptr<Shader> loadShader(const char *name)
{
    static const std::string vertexShaderExt = ".vs.glsl";
    static const std::string fragmentShaderExt = ".fs.glsl";

    std::filesystem::path assetsPath = "assets/shaders";
    std::filesystem::path vertexShaderPath = assetsPath / (std::string(name) + vertexShaderExt);
    std::filesystem::path fragmentShaderPath = assetsPath / (std::string(name) + fragmentShaderExt);

    std::cout << "Loading shader " << name << " from:\n";
    std::cout << "\t" << vertexShaderPath << "\n";
    std::cout << "\t" << fragmentShaderPath << std::endl;

    const auto vertex_shader_text = readFileText(vertexShaderPath.c_str());
    const auto fragment_shader_text = readFileText(fragmentShaderPath.c_str());

    auto shader = std::make_shared<Shader>();
    shader->add_vertex_stage(vertex_shader_text);
    shader->add_fragment_stage(fragment_shader_text);

    if (!shader->compile_and_link())
    {
        std::cerr << shader->error_log() << std::endl;
        return nullptr;
    }

    return shader;
}

std::ostream &operator<<(std::ostream &os, const Window::MouseHandler::Button &b)
{
    switch (b)
    {
    case Window::MouseHandler::Button::left:
        os << "left";
        break;
    case Window::MouseHandler::Button::right:
        os << "right";
        break;
    case Window::MouseHandler::Button::middle:
        os << "middle";
        break;
    default:
        os << "unknown mouse button";
        break;
    }
    return os;
}

// Experimental Mesh structure
struct Mesh
{
    std::shared_ptr<applesauce::VertexArray> array;
    std::shared_ptr<applesauce::Buffer> buffer;
    int elementArrayByteOffset;
};

/*
static applesauce::VertexAttribute vertexAttribFromName(const std::string &name)
{
    if (name == "POSITION")
    {
        return applesauce::VertexAttribute::position;
    }
    else if (name == "NORMAL")
    {
        return applesauce::VertexAttribute::normal;
    }
    else if (name == "TEXCOORD_0")
    {
        return applesauce::VertexAttribute::texcoord;
    }
    return applesauce::VertexAttribute::position;
}
*/

std::unordered_map<std::string, Mesh> loadMeshes(const char *filename)
{
    std::unordered_map<std::string, Mesh> result;

    std::string gltfText(readFileText(filename));
    const auto gltf = glTFFromString(gltfText.c_str());

    std::vector<std::shared_ptr<applesauce::Buffer>> buffers;
    // Load up buffers, these are going directly into OpenGL, which is arguable
    for (const auto &gltfBuffer : gltf.buffers)
    {
        buffers.emplace_back(std::make_shared<applesauce::Buffer>(&gltfBuffer.getBytes()[0], gltfBuffer.byteLength));
    }

    for (const auto &gltfMesh : gltf.meshes)
    {

        for (const auto &gltfMeshPrimitive : gltfMesh.primitives)
        {
            auto vertexArray = std::make_shared<applesauce::VertexArray>();
            for (const auto &[accessorName, accessorIndex] : gltfMeshPrimitive.attributes)
            {
                (void)accessorIndex;
                (void)accessorName;
                /*
                const auto &accessor = gltf.accessors[accessorIndex];
                const auto &bufferView = gltf.bufferViews[accessor.bufferView];

                const applesauce::VertexAttribute vattrib = vertexAttribFromName(accessorName);

                // applesauce::VertexAttributeDescription desc;

                applesauce::VertexBufferDescription desc{
                    {applesauce::VertexAttribute::position, 3, offsetof(Vertex, position), sizeof(Vertex)},
                    {applesauce::VertexAttribute::normal, 3, offsetof(Vertex, normal), sizeof(Vertex)},
                };
                */
            }
        }
    }

    return result;
}

class Triangles : public App,
                  public Window::ScrollHandler,
                  public Window::MouseHandler,
                  public Window::KeyHandler
{
public:
    struct Entity
    {
        glm::vec3 position;
        float angle;
        size_t meshIndex;
        glm::vec3 color;
    };

    class Tank
    {
        enum class Steer
        {
            neutral,
            left,
            right
        };

    public:
        Tank(Entity *entity) : entity(entity) {}

        void steerLeft()
        {
            steering = Steer::left;
        }
        void steerRight()
        {
            steering = Steer::right;
        }
        void releaseSteering()
        {
            steering = Steer::neutral;
        }

        const glm::vec3 position() const
        {
            return entity->position;
        }

        void advance()
        {
            advancing = true;
        }

        void halt()
        {
            advancing = false;
        }

        void update()
        {
            static float steerRate = 0.05;
            static float speed = 0.1;
            switch (steering)
            {
            case Steer::left:
                entity->angle += steerRate;
                break;
            case Steer::right:
                entity->angle -= steerRate;
                break;
            case Steer::neutral:
                break;
            }

            if (advancing)
            {
                glm::vec3 direction = glm::rotateY(glm::vec3{0.0, 0.0, -1.0}, entity->angle);
                entity->position += direction * speed;
            }
        }

    private:
        Entity *entity;
        Steer steering = Steer::neutral;
        bool advancing = false;
    };

public:
    void onKeyDown(int key) override
    {
        std::cout << "KEY DOWN: " << key << std::endl;
        if (players.size() < 2 || players[0] == nullptr || players[1] == nullptr)
            return;
        if (key == GLFW_KEY_A)
        {
            players[0]->steerLeft();
        }
        else if (key == GLFW_KEY_D)
        {
            players[0]->steerRight();
        }
        else if (key == GLFW_KEY_W)
        {
            players[0]->advance();
        }

        if (key == GLFW_KEY_LEFT)
        {
            players[1]->steerLeft();
        }
        else if (key == GLFW_KEY_RIGHT)
        {
            players[1]->steerRight();
        }
        else if (key == GLFW_KEY_UP)
        {
            players[1]->advance();
        }
    }

    void onKeyUp(int key) override
    {
        if (players.size() < 2 || players[0] == nullptr || players[1] == nullptr)
            return;

        if (key == GLFW_KEY_A || key == GLFW_KEY_D)
        {
            players[0]->releaseSteering();
        }
        else if (key == GLFW_KEY_W)
        {
            players[0]->halt();
        }
        if (key == GLFW_KEY_LEFT || key == GLFW_KEY_RIGHT)
        {
            players[1]->releaseSteering();
        }
        else if (key == GLFW_KEY_UP)
        {
            players[1]->halt();
        }
    }

    void onScroll(double, double yoffset) override
    {
        dist -= yoffset;
        dist = std::max(dist, 0.1f);
    }

    void onMouseDown(MouseHandler::Button button) override
    {
        if (button == MouseHandler::Button::middle)
        {
            move_camera = true;
        }
    }

    void onMouseUp(MouseHandler::Button button) override
    {
        if (button == MouseHandler::Button::middle)
        {
            move_camera = false;
        }
    }

    void onMouseMove(double xpos, double ypos) override
    {
        if (move_camera)
        {
            theta -= (last_xpos - xpos) * 0.1;
            pitch -= (last_ypos - ypos) * 0.1;
        }
        last_xpos = xpos;
        last_ypos = ypos;
    }

    void init() override
    {

        IMGUI_CHECKVERSION();
        ImGui::CreateContext();
        ImGuiIO &io = ImGui::GetIO();
        (void)io;

        ImGui::StyleColorsDark();

        const char *glsl_version = "#version 150";

        ImGui_ImplGlfw_InitForOpenGL(window.glfwWindow(), true);
        ImGui_ImplOpenGL3_Init(glsl_version);

        srand(std::time(0));

        window.setScrollHandler(this);
        window.setMouseHandler(this);
        window.setKeyHandler(this);

        // Loads from assets/shaders/basic.fs.glsl and assets/shaders/basic.vs.glsl
        shader = loadShader("basic");
        shader->use();

        // TODO: Move vertex data into files
        cubeBuffer = std::make_shared<applesauce::VertexBuffer<Vertex>>(std::initializer_list<Vertex>{
            {{-0.44999998807907104, 0.0, -0.44999998807907104}, {0.0, -1.0, -0.0}},
            {{0.44999998807907104, 0.0, 0.44999998807907104}, {0.0, -1.0, -0.0}},
            {{-0.44999998807907104, 0.0, 0.44999998807907104}, {0.0, -1.0, -0.0}},
            {{-0.5, 0.05000000447034836, 0.44999998807907104}, {-1.0, 0.0, 0.0}},
            {{-0.5, 0.949999988079071, -0.44999998807907104}, {-1.0, 0.0, 0.0}},
            {{-0.5, 0.05000000447034836, -0.44999998807907104}, {-1.0, 0.0, 0.0}},
            {{0.44999998807907104, 0.05000000447034836, 0.5}, {0.0, 0.0, 1.0}},
            {{-0.44999998807907104, 0.949999988079071, 0.5}, {0.0, 0.0, 1.0}},
            {{-0.44999998807907104, 0.05000000447034836, 0.5}, {0.0, 0.0, 1.0}},
            {{0.44999998807907104, 1.0, -0.44999998807907104}, {0.0, 1.0, 0.0}},
            {{-0.44999998807907104, 1.0, 0.44999998807907104}, {0.0, 1.0, 0.0}},
            {{0.44999998807907104, 1.0, 0.44999998807907104}, {0.0, 1.0, 0.0}},
            {{0.5, 0.05000000447034836, -0.44999998807907104}, {1.0, 0.0, 0.0}},
            {{0.5, 0.949999988079071, 0.44999998807907104}, {1.0, 0.0, 0.0}},
            {{0.5, 0.05000000447034836, 0.44999998807907104}, {1.0, 0.0, 0.0}},
            {{0.44999998807907104, 0.949999988079071, -0.5}, {0.3671795427799225, 0.28174787759780884, -0.8864519596099854}},
            {{0.4788675010204315, 0.9788675904273987, -0.4788675010204315}, {0.3671795427799225, 0.28174787759780884, -0.8864519596099854}},
            {{0.48535534739494324, 0.9500000476837158, -0.48535534739494324}, {0.3671795427799225, 0.28174787759780884, -0.8864519596099854}},
            {{0.44999998807907104, 1.0, -0.44999998807907104}, {0.28174644708633423, 0.8864525556564331, -0.3671795129776001}},
            {{0.4788675010204315, 0.9788675904273987, -0.4788675010204315}, {0.28174644708633423, 0.8864525556564331, -0.3671795129776001}},
            {{0.44999998807907104, 0.9853553771972656, -0.48535534739494324}, {0.28174644708633423, 0.8864525556564331, -0.3671795129776001}},
            {{0.5, 0.949999988079071, -0.44999998807907104}, {0.8864520788192749, 0.367179811000824, -0.2817474901676178}},
            {{0.4788675010204315, 0.9788675904273987, -0.4788675010204315}, {0.8864520788192749, 0.367179811000824, -0.2817474901676178}},
            {{0.48535534739494324, 0.9853553771972656, -0.44999998807907104}, {0.8864520788192749, 0.367179811000824, -0.2817474901676178}},
            {{0.44999998807907104, 0.0, -0.44999998807907104}, {0.3671801686286926, -0.8864519596099854, -0.2817476689815521}},
            {{0.4788675010204315, 0.021132485941052437, -0.4788675010204315}, {0.3671801686286926, -0.8864519596099854, -0.2817476689815521}},
            {{0.48535534739494324, 0.01464466005563736, -0.44999998807907104}, {0.3671801686286926, -0.8864519596099854, -0.2817476689815521}},
            {{0.44999998807907104, 0.05000000447034836, -0.5}, {0.2817479968070984, -0.36718013882637024, -0.886451780796051}},
            {{0.4788675010204315, 0.021132485941052437, -0.4788675010204315}, {0.2817479968070984, -0.36718013882637024, -0.886451780796051}},
            {{0.44999998807907104, 0.01464466005563736, -0.48535534739494324}, {0.2817479968070984, -0.36718013882637024, -0.886451780796051}},
            {{0.5, 0.05000000447034836, -0.44999998807907104}, {0.886451780796051, -0.2817481458187103, -0.3671799302101135}},
            {{0.4788675010204315, 0.021132485941052437, -0.4788675010204315}, {0.886451780796051, -0.2817481458187103, -0.3671799302101135}},
            {{0.48535534739494324, 0.05000000447034836, -0.48535534739494324}, {0.886451780796051, -0.2817481458187103, -0.3671799302101135}},
            {{0.5, 0.949999988079071, 0.44999998807907104}, {0.8864519596099854, 0.28174787759780884, 0.3671795427799225}},
            {{0.4788675010204315, 0.9788675904273987, 0.4788675010204315}, {0.8864519596099854, 0.28174787759780884, 0.3671795427799225}},
            {{0.48535534739494324, 0.9500000476837158, 0.48535534739494324}, {0.8864519596099854, 0.28174787759780884, 0.3671795427799225}},
            {{0.44999998807907104, 1.0, 0.44999998807907104}, {0.3671795129776001, 0.8864525556564331, 0.28174644708633423}},
            {{0.4788675010204315, 0.9788675904273987, 0.4788675010204315}, {0.3671795129776001, 0.8864525556564331, 0.28174644708633423}},
            {{0.48535534739494324, 0.9853553771972656, 0.44999998807907104}, {0.3671795129776001, 0.8864525556564331, 0.28174644708633423}},
            {{0.44999998807907104, 0.949999988079071, 0.5}, {0.2817474901676178, 0.367179811000824, 0.8864520788192749}},
            {{0.4788675010204315, 0.9788675904273987, 0.4788675010204315}, {0.2817474901676178, 0.367179811000824, 0.8864520788192749}},
            {{0.44999998807907104, 0.9853553771972656, 0.48535534739494324}, {0.2817474901676178, 0.367179811000824, 0.8864520788192749}},
            {{0.5, 0.05000000447034836, 0.44999998807907104}, {0.886451780796051, -0.36718013882637024, 0.2817479968070984}},
            {{0.4788675010204315, 0.021132485941052437, 0.4788675010204315}, {0.886451780796051, -0.36718013882637024, 0.2817479968070984}},
            {{0.48535534739494324, 0.01464466005563736, 0.44999998807907104}, {0.886451780796051, -0.36718013882637024, 0.2817479968070984}},
            {{0.44999998807907104, 0.05000000447034836, 0.5}, {0.3671799302101135, -0.2817481458187103, 0.886451780796051}},
            {{0.4788675010204315, 0.021132485941052437, 0.4788675010204315}, {0.3671799302101135, -0.2817481458187103, 0.886451780796051}},
            {{0.48535534739494324, 0.05000000447034836, 0.48535534739494324}, {0.3671799302101135, -0.2817481458187103, 0.886451780796051}},
            {{0.44999998807907104, 0.0, 0.44999998807907104}, {0.2817476689815521, -0.8864519596099854, 0.3671801686286926}},
            {{0.4788675010204315, 0.021132485941052437, 0.4788675010204315}, {0.2817476689815521, -0.8864519596099854, 0.3671801686286926}},
            {{0.44999998807907104, 0.01464466005563736, 0.48535534739494324}, {0.2817476689815521, -0.8864519596099854, 0.3671801686286926}},
            {{-0.44999998807907104, 0.949999988079071, -0.5}, {-0.2817474901676178, 0.367179811000824, -0.8864520788192749}},
            {{-0.4788675010204315, 0.9788675904273987, -0.4788675010204315}, {-0.2817474901676178, 0.367179811000824, -0.8864520788192749}},
            {{-0.44999998807907104, 0.9853553771972656, -0.48535534739494324}, {-0.2817474901676178, 0.367179811000824, -0.8864520788192749}},
            {{-0.5, 0.949999988079071, -0.44999998807907104}, {-0.8864519596099854, 0.28174787759780884, -0.3671795427799225}},
            {{-0.4788675010204315, 0.9788675904273987, -0.4788675010204315}, {-0.8864519596099854, 0.28174787759780884, -0.3671795427799225}},
            {{-0.48535534739494324, 0.9500000476837158, -0.48535534739494324}, {-0.8864519596099854, 0.28174787759780884, -0.3671795427799225}},
            {{-0.44999998807907104, 1.0, -0.44999998807907104}, {-0.3671795129776001, 0.8864525556564331, -0.28174644708633423}},
            {{-0.4788675010204315, 0.9788675904273987, -0.4788675010204315}, {-0.3671795129776001, 0.8864525556564331, -0.28174644708633423}},
            {{-0.48535534739494324, 0.9853553771972656, -0.44999998807907104}, {-0.3671795129776001, 0.8864525556564331, -0.28174644708633423}},
            {{-0.5, 0.05000000447034836, -0.44999998807907104}, {-0.886451780796051, -0.36718013882637024, -0.2817479968070984}},
            {{-0.4788675010204315, 0.021132485941052437, -0.4788675010204315}, {-0.886451780796051, -0.36718013882637024, -0.2817479968070984}},
            {{-0.48535534739494324, 0.01464466005563736, -0.44999998807907104}, {-0.886451780796051, -0.36718013882637024, -0.2817479968070984}},
            {{-0.44999998807907104, 0.05000000447034836, -0.5}, {-0.3671799302101135, -0.2817481458187103, -0.886451780796051}},
            {{-0.4788675010204315, 0.021132485941052437, -0.4788675010204315}, {-0.3671799302101135, -0.2817481458187103, -0.886451780796051}},
            {{-0.48535534739494324, 0.05000000447034836, -0.48535534739494324}, {-0.3671799302101135, -0.2817481458187103, -0.886451780796051}},
            {{-0.44999998807907104, 0.0, -0.44999998807907104}, {-0.2817476689815521, -0.8864519596099854, -0.3671801686286926}},
            {{-0.4788675010204315, 0.021132485941052437, -0.4788675010204315}, {-0.2817476689815521, -0.8864519596099854, -0.3671801686286926}},
            {{-0.44999998807907104, 0.01464466005563736, -0.48535534739494324}, {-0.2817476689815521, -0.8864519596099854, -0.3671801686286926}},
            {{-0.5, 0.949999988079071, 0.44999998807907104}, {-0.8864520788192749, 0.367179811000824, 0.2817474901676178}},
            {{-0.4788675010204315, 0.9788675904273987, 0.4788675010204315}, {-0.8864520788192749, 0.367179811000824, 0.2817474901676178}},
            {{-0.48535534739494324, 0.9853553771972656, 0.44999998807907104}, {-0.8864520788192749, 0.367179811000824, 0.2817474901676178}},
            {{-0.44999998807907104, 0.949999988079071, 0.5}, {-0.3671795427799225, 0.28174787759780884, 0.8864519596099854}},
            {{-0.4788675010204315, 0.9788675904273987, 0.4788675010204315}, {-0.3671795427799225, 0.28174787759780884, 0.8864519596099854}},
            {{-0.48535534739494324, 0.9500000476837158, 0.48535534739494324}, {-0.3671795427799225, 0.28174787759780884, 0.8864519596099854}},
            {{-0.44999998807907104, 1.0, 0.44999998807907104}, {-0.28174644708633423, 0.8864525556564331, 0.3671795129776001}},
            {{-0.4788675010204315, 0.9788675904273987, 0.4788675010204315}, {-0.28174644708633423, 0.8864525556564331, 0.3671795129776001}},
            {{-0.44999998807907104, 0.9853553771972656, 0.48535534739494324}, {-0.28174644708633423, 0.8864525556564331, 0.3671795129776001}},
            {{-0.44999998807907104, 0.0, 0.44999998807907104}, {-0.3671801686286926, -0.8864519596099854, 0.2817476689815521}},
            {{-0.4788675010204315, 0.021132485941052437, 0.4788675010204315}, {-0.3671801686286926, -0.8864519596099854, 0.2817476689815521}},
            {{-0.48535534739494324, 0.01464466005563736, 0.44999998807907104}, {-0.3671801686286926, -0.8864519596099854, 0.2817476689815521}},
            {{-0.44999998807907104, 0.05000000447034836, 0.5}, {-0.2817479968070984, -0.36718013882637024, 0.886451780796051}},
            {{-0.4788675010204315, 0.021132485941052437, 0.4788675010204315}, {-0.2817479968070984, -0.36718013882637024, 0.886451780796051}},
            {{-0.44999998807907104, 0.01464466005563736, 0.48535534739494324}, {-0.2817479968070984, -0.36718013882637024, 0.886451780796051}},
            {{-0.5, 0.05000000447034836, 0.44999998807907104}, {-0.886451780796051, -0.2817481458187103, 0.3671799302101135}},
            {{-0.4788675010204315, 0.021132485941052437, 0.4788675010204315}, {-0.886451780796051, -0.2817481458187103, 0.3671799302101135}},
            {{-0.48535534739494324, 0.05000000447034836, 0.48535534739494324}, {-0.886451780796051, -0.2817481458187103, 0.3671799302101135}},
            {{-0.44999998807907104, 0.0, -0.44999998807907104}, {-0.3826831877231598, -0.9238796234130859, 0.0}},
            {{-0.48535534739494324, 0.01464466005563736, 0.44999998807907104}, {-0.3826831877231598, -0.9238796234130859, 0.0}},
            {{-0.48535534739494324, 0.01464466005563736, -0.44999998807907104}, {-0.3826831877231598, -0.9238796234130859, 0.0}},
            {{-0.48535534739494324, 0.01464466005563736, -0.44999998807907104}, {-0.9238795638084412, -0.3826831579208374, 0.0}},
            {{-0.5, 0.05000000447034836, 0.44999998807907104}, {-0.9238795638084412, -0.3826831579208374, 0.0}},
            {{-0.5, 0.05000000447034836, -0.44999998807907104}, {-0.9238795638084412, -0.3826831579208374, 0.0}},
            {{0.44999998807907104, 0.0, -0.44999998807907104}, {0.0, -0.9238796234130859, -0.3826831877231598}},
            {{-0.44999998807907104, 0.01464466005563736, -0.48535534739494324}, {0.0, -0.9238796234130859, -0.3826831877231598}},
            {{0.44999998807907104, 0.01464466005563736, -0.48535534739494324}, {0.0, -0.9238796234130859, -0.3826831877231598}},
            {{0.44999998807907104, 0.01464466005563736, -0.48535534739494324}, {0.0, -0.3826831579208374, -0.9238795638084412}},
            {{-0.44999998807907104, 0.05000000447034836, -0.5}, {0.0, -0.3826831579208374, -0.9238795638084412}},
            {{0.44999998807907104, 0.05000000447034836, -0.5}, {0.0, -0.3826831579208374, -0.9238795638084412}},
            {{0.5, 0.949999988079071, -0.44999998807907104}, {0.9238797426223755, 0.0, -0.3826830983161926}},
            {{0.48535534739494324, 0.05000000447034836, -0.48535534739494324}, {0.9238797426223755, 0.0, -0.3826830983161926}},
            {{0.48535534739494324, 0.9500000476837158, -0.48535534739494324}, {0.9238797426223755, 0.0, -0.3826830983161926}},
            {{0.48535534739494324, 0.9500000476837158, -0.48535534739494324}, {0.38268306851387024, 0.0, -0.9238797426223755}},
            {{0.44999998807907104, 0.05000000447034836, -0.5}, {0.38268306851387024, 0.0, -0.9238797426223755}},
            {{0.44999998807907104, 0.949999988079071, -0.5}, {0.38268306851387024, 0.0, -0.9238797426223755}},
            {{-0.44999998807907104, 0.05000000447034836, 0.5}, {-0.3826830983161926, 0.0, 0.9238797426223755}},
            {{-0.48535534739494324, 0.9500000476837158, 0.48535534739494324}, {-0.3826830983161926, 0.0, 0.9238797426223755}},
            {{-0.48535534739494324, 0.05000000447034836, 0.48535534739494324}, {-0.3826830983161926, 0.0, 0.9238797426223755}},
            {{-0.48535534739494324, 0.05000000447034836, 0.48535534739494324}, {-0.9238797426223755, 0.0, 0.38268306851387024}},
            {{-0.5, 0.949999988079071, 0.44999998807907104}, {-0.9238797426223755, 0.0, 0.38268306851387024}},
            {{-0.5, 0.05000000447034836, 0.44999998807907104}, {-0.9238797426223755, 0.0, 0.38268306851387024}},
            {{0.44999998807907104, 0.949999988079071, 0.5}, {0.3826830983161926, 0.0, 0.9238797426223755}},
            {{0.48535534739494324, 0.05000000447034836, 0.48535534739494324}, {0.3826830983161926, 0.0, 0.9238797426223755}},
            {{0.48535534739494324, 0.9500000476837158, 0.48535534739494324}, {0.3826830983161926, 0.0, 0.9238797426223755}},
            {{0.48535534739494324, 0.9500000476837158, 0.48535534739494324}, {0.9238797426223755, 0.0, 0.38268306851387024}},
            {{0.5, 0.05000000447034836, 0.44999998807907104}, {0.9238797426223755, 0.0, 0.38268306851387024}},
            {{0.5, 0.949999988079071, 0.44999998807907104}, {0.9238797426223755, 0.0, 0.38268306851387024}},
            {{-0.44999998807907104, 0.949999988079071, -0.5}, {-0.3826830983161926, 0.0, -0.9238797426223755}},
            {{-0.48535534739494324, 0.05000000447034836, -0.48535534739494324}, {-0.3826830983161926, 0.0, -0.9238797426223755}},
            {{-0.48535534739494324, 0.9500000476837158, -0.48535534739494324}, {-0.3826830983161926, 0.0, -0.9238797426223755}},
            {{-0.48535534739494324, 0.9500000476837158, -0.48535534739494324}, {-0.9238797426223755, 0.0, -0.38268306851387024}},
            {{-0.5, 0.05000000447034836, -0.44999998807907104}, {-0.9238797426223755, 0.0, -0.38268306851387024}},
            {{-0.5, 0.949999988079071, -0.44999998807907104}, {-0.9238797426223755, 0.0, -0.38268306851387024}},
            {{0.44999998807907104, 1.0, 0.44999998807907104}, {0.0, 0.9238799810409546, 0.3826823830604553}},
            {{-0.44999998807907104, 0.9853553771972656, 0.48535534739494324}, {0.0, 0.9238799810409546, 0.3826823830604553}},
            {{0.44999998807907104, 0.9853553771972656, 0.48535534739494324}, {0.0, 0.9238799810409546, 0.3826823830604553}},
            {{0.44999998807907104, 0.9853553771972656, 0.48535534739494324}, {0.0, 0.382682740688324, 0.9238797426223755}},
            {{-0.44999998807907104, 0.949999988079071, 0.5}, {0.0, 0.382682740688324, 0.9238797426223755}},
            {{0.44999998807907104, 0.949999988079071, 0.5}, {0.0, 0.382682740688324, 0.9238797426223755}},
            {{0.44999998807907104, 1.0, -0.44999998807907104}, {0.3826823830604553, 0.9238799810409546, -0.0}},
            {{0.48535534739494324, 0.9853553771972656, 0.44999998807907104}, {0.3826823830604553, 0.9238799810409546, -0.0}},
            {{0.48535534739494324, 0.9853553771972656, -0.44999998807907104}, {0.3826823830604553, 0.9238799810409546, -0.0}},
            {{0.48535534739494324, 0.9853553771972656, -0.44999998807907104}, {0.9238797426223755, 0.382682740688324, -0.0}},
            {{0.5, 0.949999988079071, 0.44999998807907104}, {0.9238797426223755, 0.382682740688324, -0.0}},
            {{0.5, 0.949999988079071, -0.44999998807907104}, {0.9238797426223755, 0.382682740688324, -0.0}},
            {{-0.44999998807907104, 0.0, 0.44999998807907104}, {0.0, -0.9238796234130859, 0.3826831877231598}},
            {{0.44999998807907104, 0.01464466005563736, 0.48535534739494324}, {0.0, -0.9238796234130859, 0.3826831877231598}},
            {{-0.44999998807907104, 0.01464466005563736, 0.48535534739494324}, {0.0, -0.9238796234130859, 0.3826831877231598}},
            {{-0.44999998807907104, 0.01464466005563736, 0.48535534739494324}, {0.0, -0.3826831579208374, 0.9238795638084412}},
            {{0.44999998807907104, 0.05000000447034836, 0.5}, {0.0, -0.3826831579208374, 0.9238795638084412}},
            {{-0.44999998807907104, 0.05000000447034836, 0.5}, {0.0, -0.3826831579208374, 0.9238795638084412}},
            {{-0.44999998807907104, 1.0, 0.44999998807907104}, {-0.3826823830604553, 0.9238799810409546, -0.0}},
            {{-0.48535534739494324, 0.9853553771972656, -0.44999998807907104}, {-0.3826823830604553, 0.9238799810409546, -0.0}},
            {{-0.48535534739494324, 0.9853553771972656, 0.44999998807907104}, {-0.3826823830604553, 0.9238799810409546, -0.0}},
            {{-0.48535534739494324, 0.9853553771972656, 0.44999998807907104}, {-0.9238797426223755, 0.382682740688324, -0.0}},
            {{-0.5, 0.949999988079071, -0.44999998807907104}, {-0.9238797426223755, 0.382682740688324, -0.0}},
            {{-0.5, 0.949999988079071, 0.44999998807907104}, {-0.9238797426223755, 0.382682740688324, -0.0}},
            {{-0.44999998807907104, 1.0, -0.44999998807907104}, {-0.0, 0.9238799810409546, -0.3826823830604553}},
            {{0.44999998807907104, 0.9853553771972656, -0.48535534739494324}, {-0.0, 0.9238799810409546, -0.3826823830604553}},
            {{-0.44999998807907104, 0.9853553771972656, -0.48535534739494324}, {-0.0, 0.9238799810409546, -0.3826823830604553}},
            {{-0.44999998807907104, 0.9853553771972656, -0.48535534739494324}, {-0.0, 0.382682740688324, -0.9238797426223755}},
            {{0.44999998807907104, 0.949999988079071, -0.5}, {-0.0, 0.382682740688324, -0.9238797426223755}},
            {{-0.44999998807907104, 0.949999988079071, -0.5}, {-0.0, 0.382682740688324, -0.9238797426223755}},
            {{0.44999998807907104, 0.0, 0.44999998807907104}, {0.3826831877231598, -0.9238796234130859, -0.0}},
            {{0.48535534739494324, 0.01464466005563736, -0.44999998807907104}, {0.3826831877231598, -0.9238796234130859, -0.0}},
            {{0.48535534739494324, 0.01464466005563736, 0.44999998807907104}, {0.3826831877231598, -0.9238796234130859, -0.0}},
            {{0.48535534739494324, 0.01464466005563736, 0.44999998807907104}, {0.9238795638084412, -0.3826831579208374, -0.0}},
            {{0.5, 0.05000000447034836, -0.44999998807907104}, {0.9238795638084412, -0.3826831579208374, -0.0}},
            {{0.5, 0.05000000447034836, 0.44999998807907104}, {0.9238795638084412, -0.3826831579208374, -0.0}},
            {{-0.44999998807907104, 0.05000000447034836, -0.5}, {0.0, -0.0, -1.0}},
            {{0.44999998807907104, 0.949999988079071, -0.5}, {0.0, -0.0, -1.0}},
            {{0.44999998807907104, 0.05000000447034836, -0.5}, {0.0, -0.0, -1.0}},
            {{-0.44999998807907104, 0.0, -0.44999998807907104}, {0.0, -1.0, -0.0}},
            {{0.44999998807907104, 0.0, -0.44999998807907104}, {0.0, -1.0, -0.0}},
            {{0.44999998807907104, 0.0, 0.44999998807907104}, {0.0, -1.0, -0.0}},
            {{-0.5, 0.05000000447034836, 0.44999998807907104}, {-1.0, -0.0, 0.0}},
            {{-0.5, 0.949999988079071, 0.44999998807907104}, {-1.0, -0.0, 0.0}},
            {{-0.5, 0.949999988079071, -0.44999998807907104}, {-1.0, -0.0, 0.0}},
            {{0.44999998807907104, 0.05000000447034836, 0.5}, {0.0, 0.0, 1.0}},
            {{0.44999998807907104, 0.949999988079071, 0.5}, {0.0, 0.0, 1.0}},
            {{-0.44999998807907104, 0.949999988079071, 0.5}, {0.0, 0.0, 1.0}},
            {{0.44999998807907104, 1.0, -0.44999998807907104}, {0.0, 1.0, -0.0}},
            {{-0.44999998807907104, 1.0, -0.44999998807907104}, {0.0, 1.0, -0.0}},
            {{-0.44999998807907104, 1.0, 0.44999998807907104}, {0.0, 1.0, -0.0}},
            {{0.5, 0.05000000447034836, -0.44999998807907104}, {1.0, 0.0, 0.0}},
            {{0.5, 0.949999988079071, -0.44999998807907104}, {1.0, 0.0, 0.0}},
            {{0.5, 0.949999988079071, 0.44999998807907104}, {1.0, 0.0, 0.0}},
            {{0.44999998807907104, 0.949999988079071, -0.5}, {0.2817474603652954, 0.3671797513961792, -0.8864521384239197}},
            {{0.44999998807907104, 0.9853553771972656, -0.48535534739494324}, {0.2817474603652954, 0.3671797513961792, -0.8864521384239197}},
            {{0.4788675010204315, 0.9788675904273987, -0.4788675010204315}, {0.2817474603652954, 0.3671797513961792, -0.8864521384239197}},
            {{0.44999998807907104, 1.0, -0.44999998807907104}, {0.3671795129776001, 0.8864525556564331, -0.28174644708633423}},
            {{0.48535534739494324, 0.9853553771972656, -0.44999998807907104}, {0.3671795129776001, 0.8864525556564331, -0.28174644708633423}},
            {{0.4788675010204315, 0.9788675904273987, -0.4788675010204315}, {0.3671795129776001, 0.8864525556564331, -0.28174644708633423}},
            {{0.5, 0.949999988079071, -0.44999998807907104}, {0.8864519596099854, 0.28174787759780884, -0.3671795725822449}},
            {{0.48535534739494324, 0.9500000476837158, -0.48535534739494324}, {0.8864519596099854, 0.28174787759780884, -0.3671795725822449}},
            {{0.4788675010204315, 0.9788675904273987, -0.4788675010204315}, {0.8864519596099854, 0.28174787759780884, -0.3671795725822449}},
            {{0.44999998807907104, 0.0, -0.44999998807907104}, {0.2817476689815521, -0.8864519596099854, -0.3671801686286926}},
            {{0.44999998807907104, 0.01464466005563736, -0.48535534739494324}, {0.2817476689815521, -0.8864519596099854, -0.3671801686286926}},
            {{0.4788675010204315, 0.021132485941052437, -0.4788675010204315}, {0.2817476689815521, -0.8864519596099854, -0.3671801686286926}},
            {{0.44999998807907104, 0.05000000447034836, -0.5}, {0.3671799302101135, -0.2817481458187103, -0.886451780796051}},
            {{0.48535534739494324, 0.05000000447034836, -0.48535534739494324}, {0.3671799302101135, -0.2817481458187103, -0.886451780796051}},
            {{0.4788675010204315, 0.021132485941052437, -0.4788675010204315}, {0.3671799302101135, -0.2817481458187103, -0.886451780796051}},
            {{0.5, 0.05000000447034836, -0.44999998807907104}, {0.8864519000053406, -0.3671801686286926, -0.2817480266094208}},
            {{0.48535534739494324, 0.01464466005563736, -0.44999998807907104}, {0.8864519000053406, -0.3671801686286926, -0.2817480266094208}},
            {{0.4788675010204315, 0.021132485941052437, -0.4788675010204315}, {0.8864519000053406, -0.3671801686286926, -0.2817480266094208}},
            {{0.5, 0.949999988079071, 0.44999998807907104}, {0.8864521384239197, 0.3671797513961792, 0.2817474603652954}},
            {{0.48535534739494324, 0.9853553771972656, 0.44999998807907104}, {0.8864521384239197, 0.3671797513961792, 0.2817474603652954}},
            {{0.4788675010204315, 0.9788675904273987, 0.4788675010204315}, {0.8864521384239197, 0.3671797513961792, 0.2817474603652954}},
            {{0.44999998807907104, 1.0, 0.44999998807907104}, {0.28174644708633423, 0.8864525556564331, 0.3671795129776001}},
            {{0.44999998807907104, 0.9853553771972656, 0.48535534739494324}, {0.28174644708633423, 0.8864525556564331, 0.3671795129776001}},
            {{0.4788675010204315, 0.9788675904273987, 0.4788675010204315}, {0.28174644708633423, 0.8864525556564331, 0.3671795129776001}},
            {{0.44999998807907104, 0.949999988079071, 0.5}, {0.3671795725822449, 0.28174787759780884, 0.8864519596099854}},
            {{0.48535534739494324, 0.9500000476837158, 0.48535534739494324}, {0.3671795725822449, 0.28174787759780884, 0.8864519596099854}},
            {{0.4788675010204315, 0.9788675904273987, 0.4788675010204315}, {0.3671795725822449, 0.28174787759780884, 0.8864519596099854}},
            {{0.5, 0.05000000447034836, 0.44999998807907104}, {0.886451780796051, -0.2817481458187103, 0.3671799302101135}},
            {{0.48535534739494324, 0.05000000447034836, 0.48535534739494324}, {0.886451780796051, -0.2817481458187103, 0.3671799302101135}},
            {{0.4788675010204315, 0.021132485941052437, 0.4788675010204315}, {0.886451780796051, -0.2817481458187103, 0.3671799302101135}},
            {{0.44999998807907104, 0.05000000447034836, 0.5}, {0.2817480266094208, -0.3671801686286926, 0.8864519000053406}},
            {{0.44999998807907104, 0.01464466005563736, 0.48535534739494324}, {0.2817480266094208, -0.3671801686286926, 0.8864519000053406}},
            {{0.4788675010204315, 0.021132485941052437, 0.4788675010204315}, {0.2817480266094208, -0.3671801686286926, 0.8864519000053406}},
            {{0.44999998807907104, 0.0, 0.44999998807907104}, {0.3671801686286926, -0.8864519596099854, 0.2817476689815521}},
            {{0.48535534739494324, 0.01464466005563736, 0.44999998807907104}, {0.3671801686286926, -0.8864519596099854, 0.2817476689815521}},
            {{0.4788675010204315, 0.021132485941052437, 0.4788675010204315}, {0.3671801686286926, -0.8864519596099854, 0.2817476689815521}},
            {{-0.44999998807907104, 0.949999988079071, -0.5}, {-0.3671795725822449, 0.28174787759780884, -0.8864519596099854}},
            {{-0.48535534739494324, 0.9500000476837158, -0.48535534739494324}, {-0.3671795725822449, 0.28174787759780884, -0.8864519596099854}},
            {{-0.4788675010204315, 0.9788675904273987, -0.4788675010204315}, {-0.3671795725822449, 0.28174787759780884, -0.8864519596099854}},
            {{-0.5, 0.949999988079071, -0.44999998807907104}, {-0.8864521384239197, 0.3671797513961792, -0.2817474603652954}},
            {{-0.48535534739494324, 0.9853553771972656, -0.44999998807907104}, {-0.8864521384239197, 0.3671797513961792, -0.2817474603652954}},
            {{-0.4788675010204315, 0.9788675904273987, -0.4788675010204315}, {-0.8864521384239197, 0.3671797513961792, -0.2817474603652954}},
            {{-0.44999998807907104, 1.0, -0.44999998807907104}, {-0.28174644708633423, 0.8864525556564331, -0.3671795129776001}},
            {{-0.44999998807907104, 0.9853553771972656, -0.48535534739494324}, {-0.28174644708633423, 0.8864525556564331, -0.3671795129776001}},
            {{-0.4788675010204315, 0.9788675904273987, -0.4788675010204315}, {-0.28174644708633423, 0.8864525556564331, -0.3671795129776001}},
            {{-0.5, 0.05000000447034836, -0.44999998807907104}, {-0.886451780796051, -0.2817481458187103, -0.3671799302101135}},
            {{-0.48535534739494324, 0.05000000447034836, -0.48535534739494324}, {-0.886451780796051, -0.2817481458187103, -0.3671799302101135}},
            {{-0.4788675010204315, 0.021132485941052437, -0.4788675010204315}, {-0.886451780796051, -0.2817481458187103, -0.3671799302101135}},
            {{-0.44999998807907104, 0.05000000447034836, -0.5}, {-0.2817480266094208, -0.3671801686286926, -0.8864519000053406}},
            {{-0.44999998807907104, 0.01464466005563736, -0.48535534739494324}, {-0.2817480266094208, -0.3671801686286926, -0.8864519000053406}},
            {{-0.4788675010204315, 0.021132485941052437, -0.4788675010204315}, {-0.2817480266094208, -0.3671801686286926, -0.8864519000053406}},
            {{-0.44999998807907104, 0.0, -0.44999998807907104}, {-0.3671801686286926, -0.8864519596099854, -0.2817476689815521}},
            {{-0.48535534739494324, 0.01464466005563736, -0.44999998807907104}, {-0.3671801686286926, -0.8864519596099854, -0.2817476689815521}},
            {{-0.4788675010204315, 0.021132485941052437, -0.4788675010204315}, {-0.3671801686286926, -0.8864519596099854, -0.2817476689815521}},
            {{-0.5, 0.949999988079071, 0.44999998807907104}, {-0.8864519596099854, 0.28174787759780884, 0.3671795725822449}},
            {{-0.48535534739494324, 0.9500000476837158, 0.48535534739494324}, {-0.8864519596099854, 0.28174787759780884, 0.3671795725822449}},
            {{-0.4788675010204315, 0.9788675904273987, 0.4788675010204315}, {-0.8864519596099854, 0.28174787759780884, 0.3671795725822449}},
            {{-0.44999998807907104, 0.949999988079071, 0.5}, {-0.2817474603652954, 0.3671797513961792, 0.8864521384239197}},
            {{-0.44999998807907104, 0.9853553771972656, 0.48535534739494324}, {-0.2817474603652954, 0.3671797513961792, 0.8864521384239197}},
            {{-0.4788675010204315, 0.9788675904273987, 0.4788675010204315}, {-0.2817474603652954, 0.3671797513961792, 0.8864521384239197}},
            {{-0.44999998807907104, 1.0, 0.44999998807907104}, {-0.3671795129776001, 0.8864525556564331, 0.28174644708633423}},
            {{-0.48535534739494324, 0.9853553771972656, 0.44999998807907104}, {-0.3671795129776001, 0.8864525556564331, 0.28174644708633423}},
            {{-0.4788675010204315, 0.9788675904273987, 0.4788675010204315}, {-0.3671795129776001, 0.8864525556564331, 0.28174644708633423}},
            {{-0.44999998807907104, 0.0, 0.44999998807907104}, {-0.2817476689815521, -0.8864519596099854, 0.3671801686286926}},
            {{-0.44999998807907104, 0.01464466005563736, 0.48535534739494324}, {-0.2817476689815521, -0.8864519596099854, 0.3671801686286926}},
            {{-0.4788675010204315, 0.021132485941052437, 0.4788675010204315}, {-0.2817476689815521, -0.8864519596099854, 0.3671801686286926}},
            {{-0.44999998807907104, 0.05000000447034836, 0.5}, {-0.3671799302101135, -0.2817481458187103, 0.886451780796051}},
            {{-0.48535534739494324, 0.05000000447034836, 0.48535534739494324}, {-0.3671799302101135, -0.2817481458187103, 0.886451780796051}},
            {{-0.4788675010204315, 0.021132485941052437, 0.4788675010204315}, {-0.3671799302101135, -0.2817481458187103, 0.886451780796051}},
            {{-0.5, 0.05000000447034836, 0.44999998807907104}, {-0.8864519000053406, -0.3671801686286926, 0.2817480266094208}},
            {{-0.48535534739494324, 0.01464466005563736, 0.44999998807907104}, {-0.8864519000053406, -0.3671801686286926, 0.2817480266094208}},
            {{-0.4788675010204315, 0.021132485941052437, 0.4788675010204315}, {-0.8864519000053406, -0.3671801686286926, 0.2817480266094208}},
            {{-0.44999998807907104, 0.0, -0.44999998807907104}, {-0.3826831877231598, -0.9238796234130859, -0.0}},
            {{-0.44999998807907104, 0.0, 0.44999998807907104}, {-0.3826831877231598, -0.9238796234130859, -0.0}},
            {{-0.48535534739494324, 0.01464466005563736, 0.44999998807907104}, {-0.3826831877231598, -0.9238796234130859, -0.0}},
            {{-0.48535534739494324, 0.01464466005563736, -0.44999998807907104}, {-0.9238795638084412, -0.3826831579208374, -0.0}},
            {{-0.48535534739494324, 0.01464466005563736, 0.44999998807907104}, {-0.9238795638084412, -0.3826831579208374, -0.0}},
            {{-0.5, 0.05000000447034836, 0.44999998807907104}, {-0.9238795638084412, -0.3826831579208374, -0.0}},
            {{0.44999998807907104, 0.0, -0.44999998807907104}, {0.0, -0.9238796234130859, -0.3826831877231598}},
            {{-0.44999998807907104, 0.0, -0.44999998807907104}, {0.0, -0.9238796234130859, -0.3826831877231598}},
            {{-0.44999998807907104, 0.01464466005563736, -0.48535534739494324}, {0.0, -0.9238796234130859, -0.3826831877231598}},
            {{0.44999998807907104, 0.01464466005563736, -0.48535534739494324}, {0.0, -0.3826831579208374, -0.9238795638084412}},
            {{-0.44999998807907104, 0.01464466005563736, -0.48535534739494324}, {0.0, -0.3826831579208374, -0.9238795638084412}},
            {{-0.44999998807907104, 0.05000000447034836, -0.5}, {0.0, -0.3826831579208374, -0.9238795638084412}},
            {{0.5, 0.949999988079071, -0.44999998807907104}, {0.9238797426223755, -0.0, -0.38268306851387024}},
            {{0.5, 0.05000000447034836, -0.44999998807907104}, {0.9238797426223755, -0.0, -0.38268306851387024}},
            {{0.48535534739494324, 0.05000000447034836, -0.48535534739494324}, {0.9238797426223755, -0.0, -0.38268306851387024}},
            {{0.48535534739494324, 0.9500000476837158, -0.48535534739494324}, {0.3826830983161926, -0.0, -0.9238797426223755}},
            {{0.48535534739494324, 0.05000000447034836, -0.48535534739494324}, {0.3826830983161926, -0.0, -0.9238797426223755}},
            {{0.44999998807907104, 0.05000000447034836, -0.5}, {0.3826830983161926, -0.0, -0.9238797426223755}},
            {{-0.44999998807907104, 0.05000000447034836, 0.5}, {-0.38268306851387024, -0.0, 0.9238797426223755}},
            {{-0.44999998807907104, 0.949999988079071, 0.5}, {-0.38268306851387024, -0.0, 0.9238797426223755}},
            {{-0.48535534739494324, 0.9500000476837158, 0.48535534739494324}, {-0.38268306851387024, -0.0, 0.9238797426223755}},
            {{-0.48535534739494324, 0.05000000447034836, 0.48535534739494324}, {-0.9238797426223755, -0.0, 0.3826830983161926}},
            {{-0.48535534739494324, 0.9500000476837158, 0.48535534739494324}, {-0.9238797426223755, -0.0, 0.3826830983161926}},
            {{-0.5, 0.949999988079071, 0.44999998807907104}, {-0.9238797426223755, -0.0, 0.3826830983161926}},
            {{0.44999998807907104, 0.949999988079071, 0.5}, {0.38268306851387024, 0.0, 0.9238797426223755}},
            {{0.44999998807907104, 0.05000000447034836, 0.5}, {0.38268306851387024, 0.0, 0.9238797426223755}},
            {{0.48535534739494324, 0.05000000447034836, 0.48535534739494324}, {0.38268306851387024, 0.0, 0.9238797426223755}},
            {{0.48535534739494324, 0.9500000476837158, 0.48535534739494324}, {0.9238797426223755, 0.0, 0.3826830983161926}},
            {{0.48535534739494324, 0.05000000447034836, 0.48535534739494324}, {0.9238797426223755, 0.0, 0.3826830983161926}},
            {{0.5, 0.05000000447034836, 0.44999998807907104}, {0.9238797426223755, 0.0, 0.3826830983161926}},
            {{-0.44999998807907104, 0.949999988079071, -0.5}, {-0.38268306851387024, 0.0, -0.9238797426223755}},
            {{-0.44999998807907104, 0.05000000447034836, -0.5}, {-0.38268306851387024, 0.0, -0.9238797426223755}},
            {{-0.48535534739494324, 0.05000000447034836, -0.48535534739494324}, {-0.38268306851387024, 0.0, -0.9238797426223755}},
            {{-0.48535534739494324, 0.9500000476837158, -0.48535534739494324}, {-0.9238797426223755, 0.0, -0.3826830983161926}},
            {{-0.48535534739494324, 0.05000000447034836, -0.48535534739494324}, {-0.9238797426223755, 0.0, -0.3826830983161926}},
            {{-0.5, 0.05000000447034836, -0.44999998807907104}, {-0.9238797426223755, 0.0, -0.3826830983161926}},
            {{0.44999998807907104, 1.0, 0.44999998807907104}, {0.0, 0.9238799810409546, 0.3826823830604553}},
            {{-0.44999998807907104, 1.0, 0.44999998807907104}, {0.0, 0.9238799810409546, 0.3826823830604553}},
            {{-0.44999998807907104, 0.9853553771972656, 0.48535534739494324}, {0.0, 0.9238799810409546, 0.3826823830604553}},
            {{0.44999998807907104, 0.9853553771972656, 0.48535534739494324}, {0.0, 0.382682740688324, 0.9238797426223755}},
            {{-0.44999998807907104, 0.9853553771972656, 0.48535534739494324}, {0.0, 0.382682740688324, 0.9238797426223755}},
            {{-0.44999998807907104, 0.949999988079071, 0.5}, {0.0, 0.382682740688324, 0.9238797426223755}},
            {{0.44999998807907104, 1.0, -0.44999998807907104}, {0.3826823830604553, 0.9238799810409546, 0.0}},
            {{0.44999998807907104, 1.0, 0.44999998807907104}, {0.3826823830604553, 0.9238799810409546, 0.0}},
            {{0.48535534739494324, 0.9853553771972656, 0.44999998807907104}, {0.3826823830604553, 0.9238799810409546, 0.0}},
            {{0.48535534739494324, 0.9853553771972656, -0.44999998807907104}, {0.9238797426223755, 0.382682740688324, 0.0}},
            {{0.48535534739494324, 0.9853553771972656, 0.44999998807907104}, {0.9238797426223755, 0.382682740688324, 0.0}},
            {{0.5, 0.949999988079071, 0.44999998807907104}, {0.9238797426223755, 0.382682740688324, 0.0}},
            {{-0.44999998807907104, 0.0, 0.44999998807907104}, {-0.0, -0.9238796234130859, 0.3826831877231598}},
            {{0.44999998807907104, 0.0, 0.44999998807907104}, {-0.0, -0.9238796234130859, 0.3826831877231598}},
            {{0.44999998807907104, 0.01464466005563736, 0.48535534739494324}, {-0.0, -0.9238796234130859, 0.3826831877231598}},
            {{-0.44999998807907104, 0.01464466005563736, 0.48535534739494324}, {-0.0, -0.3826831579208374, 0.9238795638084412}},
            {{0.44999998807907104, 0.01464466005563736, 0.48535534739494324}, {-0.0, -0.3826831579208374, 0.9238795638084412}},
            {{0.44999998807907104, 0.05000000447034836, 0.5}, {-0.0, -0.3826831579208374, 0.9238795638084412}},
            {{-0.44999998807907104, 1.0, 0.44999998807907104}, {-0.3826823830604553, 0.9238799810409546, -0.0}},
            {{-0.44999998807907104, 1.0, -0.44999998807907104}, {-0.3826823830604553, 0.9238799810409546, -0.0}},
            {{-0.48535534739494324, 0.9853553771972656, -0.44999998807907104}, {-0.3826823830604553, 0.9238799810409546, -0.0}},
            {{-0.48535534739494324, 0.9853553771972656, 0.44999998807907104}, {-0.9238797426223755, 0.382682740688324, -0.0}},
            {{-0.48535534739494324, 0.9853553771972656, -0.44999998807907104}, {-0.9238797426223755, 0.382682740688324, -0.0}},
            {{-0.5, 0.949999988079071, -0.44999998807907104}, {-0.9238797426223755, 0.382682740688324, -0.0}},
            {{-0.44999998807907104, 1.0, -0.44999998807907104}, {0.0, 0.9238799810409546, -0.3826823830604553}},
            {{0.44999998807907104, 1.0, -0.44999998807907104}, {0.0, 0.9238799810409546, -0.3826823830604553}},
            {{0.44999998807907104, 0.9853553771972656, -0.48535534739494324}, {0.0, 0.9238799810409546, -0.3826823830604553}},
            {{-0.44999998807907104, 0.9853553771972656, -0.48535534739494324}, {0.0, 0.382682740688324, -0.9238797426223755}},
            {{0.44999998807907104, 0.9853553771972656, -0.48535534739494324}, {0.0, 0.382682740688324, -0.9238797426223755}},
            {{0.44999998807907104, 0.949999988079071, -0.5}, {0.0, 0.382682740688324, -0.9238797426223755}},
            {{0.44999998807907104, 0.0, 0.44999998807907104}, {0.3826831877231598, -0.9238796234130859, -0.0}},
            {{0.44999998807907104, 0.0, -0.44999998807907104}, {0.3826831877231598, -0.9238796234130859, -0.0}},
            {{0.48535534739494324, 0.01464466005563736, -0.44999998807907104}, {0.3826831877231598, -0.9238796234130859, -0.0}},
            {{0.48535534739494324, 0.01464466005563736, 0.44999998807907104}, {0.9238795638084412, -0.3826831579208374, -0.0}},
            {{0.48535534739494324, 0.01464466005563736, -0.44999998807907104}, {0.9238795638084412, -0.3826831579208374, -0.0}},
            {{0.5, 0.05000000447034836, -0.44999998807907104}, {0.9238795638084412, -0.3826831579208374, -0.0}},
            {{-0.44999998807907104, 0.05000000447034836, -0.5}, {0.0, 0.0, -1.0}},
            {{-0.44999998807907104, 0.949999988079071, -0.5}, {0.0, 0.0, -1.0}},
            {{0.44999998807907104, 0.949999988079071, -0.5}, {0.0, 0.0, -1.0}},
        });

        planeBuffer = std::make_shared<applesauce::VertexBuffer<Vertex>>(std::initializer_list<Vertex>{
            {{-0.5, 0.0, 0.5}, {-0.0, 1.0, -0.0}},
            {{0.5, 0.0, -0.5}, {-0.0, 1.0, -0.0}},
            {{-0.5, 0.0, -0.5}, {-0.0, 1.0, -0.0}},
            {{-0.5, 0.0, 0.5}, {0.0, 1.0, -0.0}},
            {{0.5, 0.0, 0.5}, {0.0, 1.0, -0.0}},
            {{0.5, 0.0, -0.5}, {0.0, 1.0, -0.0}},
        });

        auto cubeMesh = std::make_shared<applesauce::VertexArray>();
        auto planeMesh = std::make_shared<applesauce::VertexArray>();

        applesauce::VertexBufferDescription desc{
            {applesauce::VertexAttribute::position, 3, offsetof(Vertex, position), sizeof(Vertex)},
            {applesauce::VertexAttribute::normal, 3, offsetof(Vertex, normal), sizeof(Vertex)},
        };

        // TODO: The "Vertex Array" construct probably needs to be composed of
        // vertex arrays somehow.
        cubeMesh->addVertexBuffer(*cubeBuffer, desc);
        planeMesh->addVertexBuffer(*planeBuffer, desc);

        meshes.push_back(planeMesh);
        meshes.push_back(cubeMesh);

        glfwSwapInterval(1);

        const auto [width, height] = window.framebufferSize();
        glViewport(0, 0, width, height);
        glEnable(GL_DEPTH_TEST);

        const char *playField = "********************************\n"
                                "*                              *\n"
                                "*                              *\n"
                                "*              **              *\n"
                                "*              **              *\n"
                                "*              **              *\n"
                                "*    **                  **    *\n"
                                "*     *                  *     *\n"
                                "*  T  *   ***      ***   *  T  *\n"
                                "*     *   ***      ***   *     *\n"
                                "*     *                  *     *\n"
                                "*    **                  **    *\n"
                                "*              **              *\n"
                                "*              **              *\n"
                                "*              **              *\n"
                                "*                              *\n"
                                "*                              *\n"
                                "********************************";

        std::stringstream stream(playField);
        std::string line;

        int row = 0;
        int maxCol = -1;
        while (std::getline(stream, line, '\n'))
        {
            int col = 0;
            for (const auto &character : line)
            {
                size_t idx = character == '*' ? 1 : 0;
                glm::vec3 color = character == '*' ? WALL_COLOR : FLOOR_COLOR;
                entities.push_back({{col, 0, row}, 0, idx, color});

                // If there's a T also put a tank, cause why not
                if (character == 'T')
                {
                    entities.push_back({{col, 0, row}, 0, 2, TANK_COLORS[nextTankColor++ % 5]});
                }

                col++;
            }
            maxCol = std::max(maxCol, col);
            row++;
        }

        for (auto &entity : entities)
        {
            entity.position.x -= maxCol / 2;
            entity.position.z -= row / 2;

            if (entity.meshIndex == 2)
            {
                players.emplace_back(std::make_shared<Tank>(&entity));
            }
        }
    }

    void display() override
    {
        window.clear({0.1f, 0.1f, 0.1f, 1.0f});

        const auto [width, height] = window.framebufferSize();
        camera.viewport = {width, height};

        for (auto &player : players)
        {
            player->update();
        }

        glm::vec3 midPoint = (players[0]->position() + players[1]->position()) / 2.0f;
        float tankDist = glm::distance(players[0]->position(), players[1]->position());

        glm::vec3 movementDirection = midPoint - cameraTarget;
        cameraVelocity += movementDirection * .001f;

        cameraVelocity += -cameraVelocity * .1f;
        cameraTarget += cameraVelocity;

        float distTarget = MIN_DIST + (MAX_DIST - MIN_DIST) * (tankDist / 25.0f);
        distVelocity += (distTarget - dist) * .005;

        distVelocity += -distVelocity * .1f;
        dist += distVelocity;

        camera.position = glm::mat3(glm::yawPitchRoll(theta, pitch, 0.0f)) * glm::vec3{0, 0, -dist};
        glm::mat4 view = camera.lookAtMatrix(cameraTarget);
        glm::mat4 projection = camera.projectionMatrix();

        static float lightPitch = M_PI / 2;
        static float lightTheta = 0;

        glm::vec3 lightDir = glm::mat3(glm::yawPitchRoll(lightTheta, lightPitch, 0.0f)) * glm::vec3{0, 0, -1.0};
        glm::vec3 LightDirection = glm::mat3(view) * lightDir;

        static float specularPower = 32.0f;
        static float specularStrength = 1.0f;

        for (const auto &entity : entities)
        {
            auto model = glm::mat4(1.0);
            model = glm::translate(model, entity.position);
            model = glm::rotate(model, entity.angle, glm::vec3(0, 1, 0));

            glm::mat4 modelView = view * model;
            glm::mat3 normalMatrix = glm::mat3(modelView);

            glm::mat4 MVPMatrix = projection * modelView;

            shader->set("MVPMatrix", MVPMatrix);
            shader->set("ModelViewMatrix", modelView);
            shader->set("NormalMatrix", normalMatrix);
            shader->set("Color", entity.color);
            shader->set("Ambient", ambient);
            shader->set("LightColor", glm::vec3{1.0, 1.0, 1.0});
            shader->set("LightDirection", LightDirection);
            shader->set("SpecularPower", specularPower);
            shader->set("SpecularStrength", specularStrength);

            size_t index = entity.meshIndex < 2 ? entity.meshIndex : 1;
            meshes[index]->bind();
            glDrawArrays(GL_TRIANGLES, 0, meshes[index]->safeElementCount());
        }

        // GUI tuff
        ImGui_ImplOpenGL3_NewFrame();
        ImGui_ImplGlfw_NewFrame();
        ImGui::NewFrame();

        ImGui::Begin("Adjustment");

        ImGui::ColorEdit3("ambient", (float *)&ambient[0]);

        ImGui::SliderFloat("lightPitch", &lightPitch, 0, M_PI);
        ImGui::SliderFloat("lightTheta", &lightTheta, 0, M_PI * 2);

        ImGui::SliderFloat("SpecularPower", &specularPower, 0.0f, 256.0f);
        ImGui::SliderFloat("SpecularStrength", &specularStrength, 0.0f, 1.0f);

        ImGui::SliderFloat("camera.FOV", &camera.fieldOfVision, 0.1f, 120.0f);
        ImGui::SliderFloat("MAX DIST.FOV", &MAX_DIST, 0.1f, 120.0f);

        ImGui::Text("Application average %.3f ms/frame (%.1f FPS)", 1000.0f / ImGui::GetIO().Framerate, ImGui::GetIO().Framerate);
        ImGui::End();

        ImGui::Render();
        ImGui_ImplOpenGL3_RenderDrawData(ImGui::GetDrawData());
    }

    void cleanUp() override
    {
        std::cout << "Camera Stats:\n";
        std::cout << "\tPitch: " << pitch << std::endl;
        std::cout << "\tTheta: " << theta << std::endl;
        std::cout << "\tDist: " << dist << std::endl;
    }

private:
    std::shared_ptr<Shader> shader;
    std::shared_ptr<applesauce::VertexBuffer<Vertex>> cubeBuffer;
    std::shared_ptr<applesauce::VertexBuffer<Vertex>> planeBuffer;
    std::vector<std::shared_ptr<applesauce::VertexArray>> meshes;
    std::vector<Entity> entities;

    std::vector<std::shared_ptr<Tank>> players;

    float pitch = 0.955591;
    float theta = 2.90973;
    float dist = 25.1983;
    float distVelocity = 0;

    double last_xpos = 0;
    double last_ypos = 0;
    bool move_camera = false;
    Camera camera;
    glm::vec3 cameraTarget{0};
    glm::vec3 cameraVelocity{0};

    glm::vec3 ambient{0.3, 0.3, 0.4};
};

int main()
{
    Triangles app;
    app.run();
    return 0;
}